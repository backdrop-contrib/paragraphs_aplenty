<?php

/**
 * @file
 * USWDS Paragraphs module code.
 */

/**
 * Implements hook_theme().
 */
function uswds_paragraphs_theme($existing, $type, $theme, $path) {

  $common = array(
    'path' => $path . '/templates',
    'base hook' => 'paragraphs_item',
  );

  return array(
    'paragraphs_item__uswds_hero' => $common + array(
      'template' => 'paragraphs-item--uswds-hero',
    ),
    'paragraphs_item__uswds_graphic_list' => $common + array(
      'template' => 'paragraphs-item--uswds-graphic-list',
    ),
    'paragraphs_item__uswds_media_block' => $common + array(
      'template' => 'paragraphs-item--uswds-media-block',
    ),
    'paragraphs_item__uswds_one_and_two' => $common + array(
      'template' => 'paragraphs-item--uswds-one-and-two',
    ),
  );
}

function uswds_paragraphs_preprocess_entity(&$variables) {
  if ('paragraphs_item' == $variables['entity_type']) {
    $paragraph = $variables['paragraphs_item'];
    $bundle = $paragraph->bundle();

    // Always set the USWDS-specific "uswds_grid_class" variable.
    if (!isset($variables['uswds_grid_class'])) {
      $variables['uswds_grid_class'] = FALSE;
    }

    switch ($bundle) {

      case 'uswds_one_and_two':
        $variables['classes_array'][] = 'usa-section';
        break;

      case 'uswds_hero':
        $variables['classes_array'][] = 'usa-hero';
        // The "uswds_hero" Paragraph type should always be on the grid.
        $variables['uswds_grid_class'] = 'usa-grid';
        // Set the classes on the link and button.
        if (!empty($paragraph->field_uswds_link)) {
          $variables['content']['field_uswds_link'][0]['#element']['attributes']['class'] = 'usa-hero-link';
        }
        if (!empty($paragraph->field_uswds_button)) {
          $variables['content']['field_uswds_button'][0]['#element']['attributes']['class'] = 'usa-button usa-button-big usa-button-secondary';
        }
        // We also need to set the inline CSS for the image.
        if (!empty($paragraph->field_uswds_image)) {
          $img = file_create_url($variables['content']['field_uswds_image'][0]['#item']['uri']);
          // Convert the image to inline CSS only.
          $variables['content']['field_uswds_image'] = array(
            '#attached' => array(
              'css' => array(
                array(
                  'data' => ".paragraphs-item-uswds-hero.usa-hero { background-image:url($img); }",
                  'type' => 'inline',
                ),
              ),
            ),
          );
        }
        break;

      case 'uswds_media_block':
        $variables['classes_array'][] = 'usa-width-one-half';
        $variables['classes_array'][] = 'usa-media_block';
        $variables['content']['field_uswds_image'][0]['#item']['attributes']['class'][] = 'usa-media_block-img';
        break;

      case 'uswds_graphic_list':
        $variables['classes_array'][] = 'usa-graphic_list';
        $variables['classes_array'][] = 'usa-section';
        // The "uswds_graphic_list" bundle should always be on the grid.
        $variables['uswds_grid_class'] = 'usa-grid-full';
        // Here we split the media blocks into pairs.
        $pairs = [];
        $pair = [];
        $media_block_keys = element_children($variables['content']['field_uswds_paragraphs']);
        foreach ($media_block_keys as $key) {
          if (count($pair) < 2) {
            $pair[] = $variables['content']['field_uswds_paragraphs'][$key];
          }
          if (count($pair) == 2) {
            $pairs[] = $pair;
            $pair = [];
          }
        }
        // Catch any stragglers.
        if (!empty($pair)) {
          $pairs[] = $pair;
        }
        $variables['graphic_list_rows'] = $pairs;
        break;

    }

  }
}
